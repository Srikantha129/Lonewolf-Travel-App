import 'dart:math';

class Place {
  final String name;
  final double latitude;
  final double longitude;

  Place({required this.name, required this.latitude, required this.longitude});
}

class OptimizedRoute {
  List<Place> places;
  List<int> optimizedOrder = [];

  OptimizedRoute(this.places);

  /// Calculate the distance between two latitude/longitude coordinates using Haversine formula
  double _calculateDistance(double lat1, double lon1, double lat2, double lon2) {
    const earthRadius = 6371.0; // Radius of Earth in kilometers
    double dLat = _degreesToRadians(lat2 - lat1);
    double dLon = _degreesToRadians(lon2 - lon1);

    double a = sin(dLat / 2) * sin(dLat / 2) +
        cos(_degreesToRadians(lat1)) * cos(_degreesToRadians(lat2)) *
        sin(dLon / 2) * sin(dLon / 2);

    double c = 2 * atan2(sqrt(a), sqrt(1 - a));
    return earthRadius * c;
  }

  double _degreesToRadians(double degrees) => degrees * pi / 180.0;

  /// Generate a distance matrix (NxN) where [i][j] is the distance from place i to place j
  List<List<double>> _generateDistanceMatrix() {
    int n = places.length;
    List<List<double>> distanceMatrix = List.generate(
      n,
      (_) => List.filled(n, 0),
      growable: false,
    );

    for (int i = 0; i < n; i++) {
      for (int j = i + 1; j < n; j++) {
        double distance = _calculateDistance(
          places[i].latitude,
          places[i].longitude,
          places[j].latitude,
          places[j].longitude,
        );
        distanceMatrix[i][j] = distance;
        distanceMatrix[j][i] = distance;
      }
    }
    return distanceMatrix;
  }

  /// Optimize route using Nearest Neighbor algorithm
  List<Place> getOptimizedRoute() {
    if (places.isEmpty) return [];

    List<List<double>> distanceMatrix = _generateDistanceMatrix();
    int n = places.length;
    List<bool> visited = List.filled(n, false);
    List<int> route = [0]; // Start from the first place
    visited[0] = true;

    for (int _ = 1; _ < n; _++) {
      int lastIndex = route.last;
      int nearestNeighbor = -1;
      double shortestDistance = double.infinity;

      for (int j = 0; j < n; j++) {
        if (!visited[j] && distanceMatrix[lastIndex][j] < shortestDistance) {
          shortestDistance = distanceMatrix[lastIndex][j];
          nearestNeighbor = j;
        }
      }

      if (nearestNeighbor != -1) {
        route.add(nearestNeighbor);
        visited[nearestNeighbor] = true;
      }
    }

    optimizedOrder = route;
    return route.map((index) => places[index]).toList();
  }
}

// Example Usage
void main() {
  List<Place> places = [];

  OptimizedRoute optimizedRoute = OptimizedRoute(places);
  List<Place> route = optimizedRoute.getOptimizedRoute();
  import 'dart:math';

  class Place {
    final String name;
    final double latitude;
    final double longitude;

    Place({required this.name, required this.latitude, required this.longitude});
  }

  class OptimizedRoute {
    List<Place> places;
    List<int> optimizedOrder = [];

    OptimizedRoute(this.places);

    /// Calculate the distance between two latitude/longitude coordinates using Haversine formula
    double _calculateDistance(double lat1, double lon1, double lat2, double lon2) {
      const earthRadius = 6371.0; // Radius of Earth in kilometers
      double dLat = _degreesToRadians(lat2 - lat1);
      double dLon = _degreesToRadians(lon2 - lon1);

      double a = sin(dLat / 2) * sin(dLat / 2) +
          cos(_degreesToRadians(lat1)) * cos(_degreesToRadians(lat2)) *
          sin(dLon / 2) * sin(dLon / 2);

      double c = 2 * atan2(sqrt(a), sqrt(1 - a));
      return earthRadius * c;
    }

    double _degreesToRadians(double degrees) => degrees * pi / 180.0;

    /// Generate a distance matrix (NxN) where [i][j] is the distance from place i to place j
    List<List<double>> _generateDistanceMatrix() {
      int n = places.length;
      List<List<double>> distanceMatrix = List.generate(
        n,
        (_) => List.filled(n, 0),
        growable: false,
      );

      for (int i = 0; i < n; i++) {
        for (int j = i + 1; j < n; j++) {
          double distance = _calculateDistance(
            places[i].latitude,
            places[i].longitude,
            places[j].latitude,
            places[j].longitude,
          );
          distanceMatrix[i][j] = distance;
          distanceMatrix[j][i] = distance;
        }
      }
      return distanceMatrix;
    }

    /// Optimize route using Nearest Neighbor algorithm
    List<Place> getOptimizedRoute() {
      if (places.isEmpty) return [];

      List<List<double>> distanceMatrix = _generateDistanceMatrix();
      int n = places.length;
      List<bool> visited = List.filled(n, false);
      List<int> route = [0]; // Start from the first place
      visited[0] = true;

      for (int _ = 1; _ < n; _++) {
        int lastIndex = route.last;
        int nearestNeighbor = -1;
        double shortestDistance = double.infinity;

        for (int j = 0; j < n; j++) {
          if (!visited[j] && distanceMatrix[lastIndex][j] < shortestDistance) {
            shortestDistance = distanceMatrix[lastIndex][j];
            nearestNeighbor = j;
          }
        }

        if (nearestNeighbor != -1) {
          route.add(nearestNeighbor);
          visited[nearestNeighbor] = true;
        }
      }

      optimizedOrder = route;
      return route.map((index) => places[index]).toList();
    }
  }

  // Example Usage
  void main() {
    List<Place> places = [];

    OptimizedRoute optimizedRoute = OptimizedRoute(places);
    List<Place> route = optimizedRoute.getOptimizedRoute();

    print("Optimized route:");
    for (Place place in route) {
      print(place.name);
    }
  }


  print("Optimized route:");
  for (Place place in route) {
    print(place.name);
  }
}
